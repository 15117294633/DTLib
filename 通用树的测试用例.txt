  //≤‚ ‘¥˙¬Î
   GTreeNode<char> root;
   root.parent=NULL;//Comfire
   root.values='A';
   GTree<char> my;
   my.insert(&root);
   GTreeNode<char>* temp=NULL;
   temp=my.find(&root);
   my.insert('B',temp);
   my.insert('C',temp);
   my.insert('D',temp);
   temp=my.find('B');
   my.insert('E',temp);
   my.insert('F',temp);
   temp=my.find('E');
   my.insert('K',temp);
   my.insert('L',temp);
   temp=my.find('C');
   my.insert('G',temp);

   temp=my.find('D');
   my.insert('H',temp);
   my.insert('I',temp);
   my.insert('J',temp);
   temp=my.find('H');
   my.insert('M',temp);
   for(my.begin();!my.end();my.next())
   {
       cout<<my.current()<<" ";
   }
   cout<<endl;
//   const char* freach="KLFGMIJ";
//   while (*freach!='\0') {
//       TreeNode<char>* temp1;
//       temp1=my.find(*freach);
//       while(temp1!=NULL)
//       {
//          cout<<temp1->values<<" ";
//          temp1=temp1->parent;
//       }
//       cout<<endl;
//       freach++;
//   }
  SharedPointer<Tree<char>> sp=my.remove('D');
  const char* freach="MIJ";
  while (*freach!='\0') {
      TreeNode<char>* temp1;
      temp1=sp->find(*freach);
      while(temp1!=NULL)
      {
         cout<<temp1->values<<" ";
         temp1=temp1->parent;
      }
      cout<<endl;
      freach++;
  }
   cout<<endl;
  for(my.begin();!my.end();my.next())
  {
      cout<<my.current()<<" ";
  }
  cout<<endl;
  cout<<sp->count()<<endl;
  cout<<sp->height()<<endl;
  cout<<sp->degree()<<endl;